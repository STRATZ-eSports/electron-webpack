{"version":3,"sources":["../../src/dev/dev-runner.ts"],"names":[],"mappings":"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","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport chalk from \"chalk\"\nimport { spawn } from \"child_process\"\nimport { readdir, remove } from \"fs-extra-p\"\nimport * as path from \"path\"\nimport \"source-map-support/register\"\nimport webpack, { Compiler } from \"webpack\"\nimport { HmrServer } from \"../electron-main-hmr/HmrServer\"\nimport { configure } from \"../main\"\nimport { getFreePort, orNullIfFileNotExist } from \"../util\"\nimport { DelayedFunction, getCommonEnv, logError, logProcess, logProcessErrorOutput } from \"./devUtil\"\nimport { startRenderer } from \"./WebpackDevServerManager\"\n\nconst projectDir = process.cwd()\n\nlet socketPath: string | null = null\n\nconst debug = require(\"debug\")(\"electron-webpack\")\n\n// do not remove main.js to allow IDE to keep breakpoints\nasync function emptyMainOutput() {\n  const outDir = path.join(projectDir, \"dist\", \"main\")\n  const files = await orNullIfFileNotExist(readdir(outDir))\n  if (files == null) {\n    return\n  }\n\n  await BluebirdPromise.map(files.filter(it => !it.startsWith(\".\") && it !== \"main.js\"), it => remove(outDir + path.sep + it))\n}\n\nclass DevRunner {\n  async start() {\n    const wdsHost = \"localhost\"\n    const wdsPort = await getFreePort(wdsHost, 9080)\n    const env = {\n      ...getCommonEnv(),\n      ELECTRON_WEBPACK_WDS_HOST: wdsHost,\n      ELECTRON_WEBPACK_WDS_PORT: wdsPort,\n    }\n\n    const hmrServer = new HmrServer()\n    await Promise.all([\n      startRenderer(projectDir, env),\n      hmrServer.listen()\n        .then(it => {\n          socketPath = it\n        }),\n      emptyMainOutput()\n        .then(() => this.startMainCompilation(hmrServer)),\n    ])\n\n    hmrServer.ipc.on(\"error\", (error: Error) => {\n      logError(\"Main\", error)\n    })\n\n    const electronArgs = process.env.ELECTRON_ARGS\n    const args = electronArgs != null && electronArgs.length > 0 ? JSON.parse(electronArgs) : [`--inspect=${await getFreePort(\"127.0.0.1\", 5858)}`]\n    args.push(path.join(projectDir, \"dist/main/main.js\"))\n    // Pass remaining arguments to the application. Remove 3 instead of 2, to remove the `dev` argument as well.\n    args.push(...process.argv.slice(3))\n    // we should start only when both start and main are started\n    startElectron(args, env)\n  }\n\n  async startMainCompilation(hmrServer: HmrServer) {\n    const mainConfig = await configure(\"main\", {\n      production: false,\n      autoClean: false,\n      forkTsCheckerLogger: {\n        info: () => {\n          // ignore\n        },\n\n        warn: (message: string) => {\n          logProcess(\"Main\", message, chalk.yellow)\n        },\n\n        error: (message: string) => {\n          logProcess(\"Main\", message, chalk.red)\n        },\n      },\n    })\n\n    await new Promise((resolve: (() => void) | null, reject: ((error: Error) => void) | null) => {\n      const compiler: Compiler = webpack(mainConfig!!)\n\n      const printCompilingMessage = new DelayedFunction(() => {\n        logProcess(\"Main\", \"Compiling...\", chalk.yellow)\n      })\n      compiler.hooks.compile.tap(\"electron-webpack-dev-runner\", () => {\n        hmrServer.beforeCompile()\n        printCompilingMessage.schedule()\n      })\n\n      let watcher: Compiler.Watching | null = compiler.watch({}, (error, stats) => {\n        printCompilingMessage.cancel()\n\n        if (watcher == null) {\n          return\n        }\n\n        if (error != null) {\n          if (reject == null) {\n            logError(\"Main\", error)\n          }\n          else {\n            reject(error)\n            reject = null\n          }\n          return\n        }\n\n        logProcess(\"Main\", stats.toString({\n          colors: true,\n        }), chalk.yellow)\n\n        if (resolve != null) {\n          resolve()\n          resolve = null\n          return\n        }\n\n        hmrServer.built(stats)\n      })\n\n      require(\"async-exit-hook\")((callback: () => void) => {\n        debug(`async-exit-hook: ${callback == null}`)\n        const w = watcher\n        if (w == null) {\n          return\n        }\n\n        watcher = null\n        w.close(() => callback())\n      })\n    })\n  }\n}\n\nasync function main() {\n  const devRunner = new DevRunner()\n  await devRunner.start()\n}\n\nmain()\n  .catch(error => {\n    console.error(error)\n  })\n\nfunction startElectron(electronArgs: Array<string>, env: any) {\n  const electronProcess = spawn(require(\"electron\").toString(), electronArgs, {\n    env: {\n      ...env,\n      ELECTRON_HMR_SOCKET_PATH: socketPath,\n    }\n  })\n\n  // required on windows\n  require(\"async-exit-hook\")(() => {\n    electronProcess.kill(\"SIGINT\")\n  })\n\n  let queuedData: string | null = null\n  electronProcess.stdout.on(\"data\", data => {\n    data = data.toString()\n    // do not print the only line - doesn't make sense\n    if (data.trim() === \"[HMR] Updated modules:\") {\n      queuedData = data\n      return\n    }\n\n    if (queuedData != null) {\n      data = queuedData + data\n      queuedData = null\n    }\n\n    logProcess(\"Electron\", data, chalk.blue)\n  })\n\n  logProcessErrorOutput(\"Electron\", electronProcess)\n\n  electronProcess.on(\"close\", exitCode => {\n    debug(`Electron exited with exit code ${exitCode}`)\n    if (exitCode === 100) {\n      setImmediate(() => {\n        startElectron(electronArgs, env)\n      })\n    }\n    else {\n      (process as any).emit(\"message\", \"shutdown\")\n    }\n  })\n}"],"sourceRoot":""}
